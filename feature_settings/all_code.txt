
--- ./src/androidTest/java/com/danitejada/feature/settings/apikey/ApiKeyScreenTest.kt ---

package com.danitejada.feature.settings.apikey

import androidx.compose.ui.test.assertIsEnabled
import androidx.compose.ui.test.assertIsNotEnabled
import androidx.compose.ui.test.junit4.createComposeRule
import androidx.compose.ui.test.onNodeWithText
import androidx.compose.ui.test.performClick
import androidx.compose.ui.test.performTextInput
import com.danitejada.core.domain.usecases.settings.SaveApiKeyUseCase
import com.danitejada.core.ui.theme.GalleryAppTheme
import io.mockk.coVerify
import io.mockk.mockk

import org.junit.Rule
import org.junit.Test

class ApiKeyScreenTest {

  @get:Rule
  val composeTestRule = createComposeRule()

  private val saveApiKeyUseCase: SaveApiKeyUseCase = mockk(relaxed = true)

  @Test
  fun saveButton_isDisabled_whenInputIsEmpty() {
    // Given the screen is launched with an empty input
    val viewModel = ApiKeyViewModel(saveApiKeyUseCase)
    composeTestRule.setContent {
      GalleryAppTheme {
        ApiKeyScreen(
          viewModel = viewModel,
          onApiKeySaved = {}
        )
      }
    }

    // Then the "Save Key" button is disabled
    composeTestRule.onNodeWithText("Save Key").assertIsNotEnabled()
  }

  @Test
  fun saveButton_isEnabled_whenInputIsNotEmpty() {
    // Given the screen is launched
    val viewModel = ApiKeyViewModel(saveApiKeyUseCase)
    composeTestRule.setContent {
      GalleryAppTheme {
        ApiKeyScreen(
          viewModel = viewModel,
          onApiKeySaved = {}
        )
      }
    }

    // When text is entered into the text field
    composeTestRule.onNodeWithText("API Key").performTextInput("some-valid-key")

    // Then the "Save Key" button is enabled
    composeTestRule.onNodeWithText("Save Key").assertIsEnabled()
  }

  @Test
  fun clickingSaveButton_withValidInput_callsViewModel() {
    // Given the screen is launched
    val viewModel = ApiKeyViewModel(saveApiKeyUseCase)
    composeTestRule.setContent {
      GalleryAppTheme {
        ApiKeyScreen(viewModel = viewModel, onApiKeySaved = {})
      }
    }

    val apiKey = "563492ad6f91700001000001abc123def456"

    // When valid text is entered and the save button is clicked
    composeTestRule.onNodeWithText("API Key").performTextInput(apiKey)
    composeTestRule.onNodeWithText("Save Key").performClick()

    // Then the saveApiKey method on the use case is called
    coVerify { saveApiKeyUseCase.invoke(apiKey) }
  }
}


--- ./src/main/java/com/danitejada/feature/settings/apikey/ApiKeyUiState.kt ---

package com.danitejada.feature.settings.apikey

import androidx.annotation.StringRes

/**
 * Represents the UI state of the API key input screen.
 */
sealed interface ApiKeyUiState {
  /**
  * Indicates the screen is in a loading state while saving the API key.
  */
  data object Loading : ApiKeyUiState

  /**
   * Indicates the API key was successfully saved.
   *
   * @param apiKey The saved API key.
   */
  data class Success(val apiKey: String) : ApiKeyUiState

  /**
   * Indicates an error occurred while saving the API key.
   *
   * @param messageResId The resource ID for the error message to display.
   */
  data class Error(@StringRes val messageResId: Int) : ApiKeyUiState

  /**
   * Represents the default idle state of the screen.
   *
   * @param apiKey The current API key value in the input field.
   */
  data class Idle(val apiKey: String) : ApiKeyUiState
}


--- ./src/main/java/com/danitejada/feature/settings/apikey/ApiKeyViewModel.kt ---

package com.danitejada.feature.settings.apikey

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.danitejada.common.R
import com.danitejada.core.domain.usecases.settings.GetApiKeyUseCase
import com.danitejada.core.domain.usecases.settings.SaveApiKeyUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.io.IOException
import javax.inject.Inject

/**
 * ViewModel for managing API key input and saving logic.
 *
 * @param saveApiKeyUseCase Use case for saving the API key.
 * @param getApiKeyUseCase Use case for retrieving the saved API key.
 */
@HiltViewModel
class ApiKeyViewModel @Inject constructor(
  private val saveApiKeyUseCase: SaveApiKeyUseCase,
  private val getApiKeyUseCase: GetApiKeyUseCase,
) : ViewModel() {

  private var saveJob: Job? = null

  private val _uiState = MutableStateFlow<ApiKeyUiState>(ApiKeyUiState.Idle(""))
  val uiState: StateFlow<ApiKeyUiState> = _uiState.asStateFlow()

  /**
   * Loads the saved API key from storage and updates the UI state.
   */
  fun loadApiKey() {
    viewModelScope.launch {
      val apiKey = getApiKeyUseCase()
      _uiState.value = ApiKeyUiState.Idle(apiKey?.value ?: "")
    }
  }

  /**
   * Saves the provided API key after validation. Launches a coroutine in [viewModelScope] to
   * save the API key securely.
   *
   * @param apiKey The API key to save.
   */
  fun saveApiKey(apiKey: String) {
    _uiState.value = ApiKeyUiState.Idle(apiKey)
    when {
      apiKey.isBlank() -> {
        _uiState.value = ApiKeyUiState.Error(R.string.error_api_key_empty)
        return
      }

      !isValidApiKeyFormat(apiKey) -> {
        _uiState.value = ApiKeyUiState.Error(R.string.error_api_key_invalid)
        return
      }
    }

    saveJob?.cancel()
    saveJob = viewModelScope.launch {
      _uiState.value = ApiKeyUiState.Loading
      try {
        saveApiKeyUseCase(apiKey)
        _uiState.value = ApiKeyUiState.Success(apiKey)
      } catch (e: Exception) {
        _uiState.value = ApiKeyUiState.Error(mapErrorToMessage(e))
      }
    }
  }
  /**
   * Validates the format of the API key.
   *
   * @param apiKey The API key to validate.
   * @return True if the API key is valid (30-80 alphanumeric characters), false otherwise.
   */
  private fun isValidApiKeyFormat(apiKey: String): Boolean {
    return apiKey.length in 30..80 && apiKey.matches(Regex("^[a-zA-Z0-9]+$"))
  }

  /**
   * Maps an exception to a string resource ID for error display.
   *
   * @param e The exception to map.
   * @return The resource ID of the error message.
   */
  private fun mapErrorToMessage(e: Exception): Int = when (e) {
    is SecurityException -> R.string.error_security_generic
    is IllegalArgumentException -> R.string.error_api_key_invalid
    is IOException -> R.string.error_network
    else -> when {
      e.message?.contains("encryption", ignoreCase = true) == true ->
        R.string.error_security_encryption_failed

      e.message?.contains("keystore", ignoreCase = true) == true ->
        R.string.error_security_keystore_not_ready

      else -> R.string.error_api_key_save_failed
    }
  }

  /**
   * Resets the UI state to the initial state by reloading the saved API key.
   */
  fun resetUiState() {
    loadApiKey()
  }

  override fun onCleared() {
    super.onCleared()
    saveJob?.cancel()
  }
}


--- ./src/main/java/com/danitejada/feature/settings/apikey/ApiKeyScreen.kt ---

package com.danitejada.feature.settings.apikey

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.imePadding
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.platform.LocalSoftwareKeyboardController
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.semantics.contentDescription
import androidx.compose.ui.semantics.semantics
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavController
import com.danitejada.common.R

/**
 * Composable function that renders the API key input screen.
 *
 * @param viewModel The ViewModel for managing API key logic.
 * @param onApiKeySaved Callback invoked when the API key is successfully saved.
 * @param onBackClick Callback invoked when the back button is clicked.
 * @param navController The navigation controller for handling navigation.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ApiKeyScreen(
  viewModel: ApiKeyViewModel,
  onApiKeySaved: () -> Unit,
  onBackClick: () -> Unit,
  navController: NavController
) {
  val uiState by viewModel.uiState.collectAsStateWithLifecycle()
  val canNavigateBack = navController.previousBackStackEntry != null
  var apiKeyInput by remember { mutableStateOf("") }

  // Load the saved API key when the screen starts
  LaunchedEffect(Unit) {
    viewModel.loadApiKey()
  }

  // Pre-fill input field with saved key (once)
  LaunchedEffect(uiState) {
    if (uiState is ApiKeyUiState.Idle && apiKeyInput.isBlank()) {
      apiKeyInput = (uiState as ApiKeyUiState.Idle).apiKey
    }

    (uiState as? ApiKeyUiState.Success)?.let {
      if (it.apiKey.isNotBlank()) {
        onApiKeySaved()
        viewModel.resetUiState()
      }
    }
  }

  ApiKeyContent(
    uiState = uiState,
    apiKeyInput = apiKeyInput,
    onApiKeyInputChange = { apiKeyInput = it },
    onSaveClick = { viewModel.saveApiKey(apiKeyInput) },
    canNavigateBack = canNavigateBack,
    onBackClick = onBackClick
  )
}

/**
 * Renders the main content of the API key input screen, including the text field and save button.
 *
 * @param uiState The current UI state of the API key screen.
 * @param apiKeyInput The current value of the API key input field.
 * @param onApiKeyInputChange Callback invoked when the API key input changes.
 * @param onSaveClick Callback invoked when the save button is clicked.
 * @param canNavigateBack Whether the back button should be displayed.
 * @param onBackClick Callback invoked when the back button is clicked.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ApiKeyContent(
  uiState: ApiKeyUiState,
  apiKeyInput: String,
  onApiKeyInputChange: (String) -> Unit,
  onSaveClick: () -> Unit,
  canNavigateBack: Boolean,
  onBackClick: () -> Unit
) {
  val focusManager = LocalFocusManager.current
  val keyboardController = LocalSoftwareKeyboardController.current

  Scaffold(
    topBar = {
      ApiKeyTopAppBar(
        canNavigateBack = canNavigateBack,
        onBackClick = onBackClick
      )
    }
  ) { paddingValues ->
    Column(
      modifier = Modifier
        .padding(paddingValues)
        .fillMaxSize()
        .padding(16.dp)
        .verticalScroll(rememberScrollState())
        .imePadding(),
      horizontalAlignment = Alignment.CenterHorizontally,
      verticalArrangement = Arrangement.Center
    ) {
      Text(
        text = stringResource(R.string.settings_api_key_blurb),
        style = MaterialTheme.typography.titleLarge,
        modifier = Modifier.padding(bottom = 32.dp)
      )

      ApiKeyTextField(
        value = apiKeyInput,
        onValueChange = onApiKeyInputChange,
        uiState = uiState,
        onDone = {
          focusManager.clearFocus()
          keyboardController?.hide()
          onSaveClick()
        }
      )

      SaveButton(
        uiState = uiState,
        isInputValid = apiKeyInput.isNotBlank(),
        onClick = {
          focusManager.clearFocus()
          keyboardController?.hide()
          onSaveClick()
        }
      )
    }
  }
}

/**
 * Renders the top app bar for the API key input screen.
 *
 * @param canNavigateBack Whether the back button should be displayed.
 * @param onBackClick Callback invoked when the back button is clicked.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ApiKeyTopAppBar(
  canNavigateBack: Boolean,
  onBackClick: () -> Unit
) {
  TopAppBar(
    title = {
      Text(
        text = stringResource(R.string.settings_screen_title),
        style = MaterialTheme.typography.headlineSmall
      )
    },
    navigationIcon = {
      if (canNavigateBack) {
        val backDescription = stringResource(R.string.content_description_navigate_back)
        IconButton(
          onClick = onBackClick,
          modifier = Modifier.semantics {
            contentDescription = backDescription
          }) {
          Icon(
            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
            contentDescription = null
          )
        }
      }
    }
  )
}

/**
 * Renders the text field for entering the API key.
 *
 * @param value The current value of the API key input.
 * @param onValueChange Triggers when the user updates the API key input.
 * @param uiState The current UI state of the API key screen.
 * @param onDone Callback invoked when the done action is triggered on the keyboard.
 */
@Composable
fun ApiKeyTextField(
  value: String,
  onValueChange: (String) -> Unit,
  uiState: ApiKeyUiState,
  onDone: () -> Unit
) {
  val isError = uiState is ApiKeyUiState.Error
  val isReadyToSubmit = uiState is ApiKeyUiState.Idle || isError

  OutlinedTextField(
    value = value,
    onValueChange = onValueChange,
    label = { Text(stringResource(R.string.settings_api_key_label)) },
    singleLine = true,
    keyboardOptions = KeyboardOptions(
      imeAction = ImeAction.Done,
      keyboardType = KeyboardType.Text
    ),
    keyboardActions = KeyboardActions(onDone = {
      if (value.isNotBlank() && isReadyToSubmit) {
        onDone()
      }
    }),
    isError = isError,
    supportingText = {
      if (uiState is ApiKeyUiState.Error) {
        Text(
          text = stringResource(uiState.messageResId),
          color = MaterialTheme.colorScheme.error
        )
      }
    },
    modifier = Modifier
      .fillMaxWidth()
      .padding(bottom = 16.dp)
  )
}

/**
 * Renders the save button for submitting the API key.
 *
 * @param uiState The current UI state of the API key screen.
 * @param isInputValid Indicates whether the input field has content and is ready to submit.
 * @param onClick Callback invoked when the save button is clicked.
 */
@Composable
fun SaveButton(
  uiState: ApiKeyUiState,
  isInputValid: Boolean,
  onClick: () -> Unit
) {
  val isReadyToSubmit = uiState is ApiKeyUiState.Idle || uiState is ApiKeyUiState.Error

  Button(
    onClick = onClick,
    enabled = isInputValid && isReadyToSubmit,
    modifier = Modifier.fillMaxWidth()
  ) {
    if (uiState is ApiKeyUiState.Loading) {
      CircularProgressIndicator(
        modifier = Modifier.size(24.dp),
        color = MaterialTheme.colorScheme.onPrimary,
        strokeWidth = 2.dp
      )
    } else {
      Text(stringResource(R.string.settings_button_save_key))
    }
  }
}

